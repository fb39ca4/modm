#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (c) 2017-2018, Niklas Hauser
#
# This file is part of the modm project.
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# -----------------------------------------------------------------------------

import os
import platform

# import all common code
exec(open(localpath("common.py")).read())

#filter to windowsify paths separators
def windowsify(path):
	if 'Windows' in platform.platform():
	    path = path.replace('/','\\')
	    path = path.replace("\\", "\\\\")
	    return path
	else:
	    return path


def init(module):
    module.name = "build"
    module.description = FileReader("module.md")
    module.add_filter("windowsify", windowsify)


def prepare(module, options):
    _, default_project_name = os.path.split(os.getcwd())
    default_project_name = default_project_name.replace(".", "_").replace(" ", "_")
    platform = options[":target"].identifier["platform"]

    module.add_option(
        StringOption(name="project.name", default=default_project_name,
                     description=descr_project_name))
    module.add_option(
        StringOption(name="build.path", default="build/"+default_project_name,
                     description=descr_build_path))

    if platform in ["avr"]:
        # we need the clock:f_cpu option!
        module.depends(":platform:clock")
        module.add_option(
            StringOption(name="avrdude.programmer", default="avrispmkII",
                         description="AvrDude programmer"))
        module.add_option(
            StringOption(name="avrdude.port", default="usb",
                         description="AvrDude programmer port"))
        module.add_option(
            NumericOption(name="avrdude.baudrate", default=-1,
                          description="AvrDude programmer baudrate"))
        module.add_option(
            StringOption(name="avrdude.options", default="",
                         description="AvrDude programmer options"))

    if options[":target"].has_driver("core:cortex-m*"):
        module.add_option(
            StringOption(name="openocd.cfg", default="",
                         description=descr_openocd_cfg))

    return True


def build(env):
    # Append custom openocd config file to metadata
    openocd_cfg = env.get_option(":build:openocd.cfg", "")
    if len(openocd_cfg):
        env.add_metadata("openocd.configfile", openocd_cfg)

    # Append common search paths to metadata
    env.add_metadata("openocd.search", "modm/openocd")

    # Add compiler flags to metadata
    for flag, values in common_compiler_flags("gcc", env[":target"]).items():
        env.add_metadata(flag, *values)


def post_build(env, buildlog):
    target = env[":target"]
    env.substitutions = {
        "metadata": buildlog.metadata,
        "gitignore": [env.reloutpath(i, "modm") for i in buildlog.repo_metadata["gitignore"]["modm"]],
    }
    env.outbasepath = "modm"

    # Currently a modm only feature
    if len(env.substitutions["gitignore"]):
        env.template("gitignore.in", ".gitignore")

    if env[":target"].has_driver("core:cortex-m*"):
        env.template("openocd.cfg.in")
        env.template("gdbinit.in")


# ============================ Option Descriptions ============================
globals()["descr_project_name"] = """# Project Name

The project name defaults to the folder name you're calling lbuild from.

It's used by your build system to name the executable and it may also be passed
to your application via a string constant or CPP define.
"""

globals()["descr_build_path"] = """# Build Path

The build path is defaulted to `build/{modm:build:project.name}`.

If you have a lot of embedded projects, you may want to change the build path
to a *common* directory so that you don't have `build/` folders everywhere.
Remember to add your build path to your `.gitignore`.

You should use a relative path instead of an absolute one, so that this option
still works for other developers.
"""

globals()["descr_openocd_cfg"] = """# Path to a custom OpenOCD configuration file

If you have a custom configuration file for your target, it will get included
by the generated `modm/openocd.cfg`.

This is useful for not having to duplicate your config if you have several
projects using the same target (like small bring-up and test projects).

!!! tip "Do not execute commands by default"
    When providing your own config file, wrap your specific commands into functions
    and do not execute them by default. A stray `init` or similar in your script
    will mess with modm's ability to program and debug a device correctly.
"""
